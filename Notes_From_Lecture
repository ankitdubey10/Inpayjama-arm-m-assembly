Software Engineer to think about the CPU.
To store a 1 bit, we usully do with a Capacitor, if charge exists then it is 1 or if no charge then it is 0. 
The other way to thing is of having a invertor with with a feedback mechanism. 
     1 |-----|>o------| 0
-------|              |-------  So whatever you put here it is trapped if power is available.  
     1 |-----o<|------| 0
Let say this is 1 bit. Lets take 8 bit it means eight blocks, same goes for 32 bit or 64 bit.
So the entire will be called as Register(8bit,16bit,32bit,64bit).
Unit of Storage is a bit. Group of bit(8/16/32) will be called as 8Bit Registeer or 32 bit register. 
Programmer's model is based on the register. 
Let say you got 8 bit of register in form of an array that is called as the Memory. 
See CPU as bunch of registers:- Add more points here. 
Registers -> GPR(General Purpose Register), Status Register, Config Register(Control the CPU what CPU can do and cant do).

If CPU is having 128 interrupts, then it means there would be 128 lines dedicated to input source. 
Designing cost CPU will be increse if number of input pins are increased so need to reduce it. 
So the ARM developer does is what added another IC and this is connected to CPU. 
That IC will be responsible for the all inputs. 
This is called as interrupt controller. This is NVIC which M+ developer did. 
So basically the NVIC+Cortex M Processor together is called as ARM CPU.

In NVIC we might need only 2 or 3 input and rest we need to ignore and we need to pass the information regarding this so, to do this we have Configuration Registers. 
Here we need to config those registers to make it work. 

******************************************************************************************************************************************************************
******************************************************************************************************************************************************************

Microarchitecutee is more than specification details. 
In ARM provide 3 types of ARM CPU whiich are listed below:
1. A (Application to run the OS - Linux, MacOS, Windows)
2. M (This is used for the Microcontroller)
3. R (Real Time Application like Passing the Packet or Minor Pointing Applicaiton like Determinism (Time Bound Tasks ))

Performance Wise  A >> R >> M

ARM CORTEX M is further divided into V6,V7,V8.
V6->[] M0,M+,M1 are microarchitecture.
V7->[] M3,M4,M7
V8->[] M23,M33,M55

Instructions of M3 will be supported in the M23, means V6 will support V7 and V7 will support V8. 
M4->DSP M3->DOES NOT HAVE DSP

*****************************************************************************************************************************************
*****************************************************************************************************************************************

Programmer's Model For the M-Class CPUs.

M Class can be said like 16 GPR Rgisters(R0 TO R15), 5 Special Registers. 
R13     STACK POINTER    -->  It stores the actual point where the stack is pointing. Function Calls and varibales.
        There are two types of stacks MSP and PSP. Stack increments or decrements as the funciton call is done. 

R14     LINK REGISTER    -->  It stores the address where the CPU must return after the execution of the Program Counter's. 
        It generally happens when the execution is done by the Function Call is there in between a call. Where to go after completion of call.

R15     PROGRAM COUNTER  -->  Stores the Next Cycle Instruction's Address. 
        Means if its is 0x10000000 then,in next cycle it will fetch the Instruction from the memory location of 0x10000000. 

XPSR                                   PROGRAM STATUS REGISTER
XPSR can split into three. PSR, EPBR, IPSR. 


STATUS CONFIGURATION                    
CONTROL                                CONTROL REGISTER

******************************************************************************************************************************************************************
******************************************************************************************************************************************************************

Modes and Priviledge of the CPU
ARM Cortex M CPU can operate in two modes, as listed below: 
1. Thread Mode 
2. Handler Mode
Thread Mode can be in the Privileged Mode or Unprivileged Mode. 
The Control Register's 0th bit is the decider for the Priviledged or Unpriviledged Mode. This bit is responsible. 
Thread Mode can use PSP, MSP(R13). 

Handler Mode can only be in the Priviledged Mode. 
Handler mode will always use MSP(R13). 

M Class CPU has exceptions. Difference between Interrupt and Exception is nothing but exception can be called as internal(usually
malfunction) while we can call interrupt as the outside stuffs. Exception or Interrupt are usully considered as one in layman language. 

Whenever system starts it starts in Thread Mode (in PM) when exception/interrupt happens it goes to Handler Mode. 
Then on the condition it might go to the UPM(in Thread Mode) or the Thread Mode(in PM). 
From Thread Mode(PM) user can use the CONTROL mode to shuffle the bit and go to the Unpriviledge mode from the Priviledged Mode. 

Why have two MOdes of Operation? 
When you are dealing with interrupt/exception, you are delaing with the devices, then you might need the complete axis to that device.
Hence the handler (in PM) comes into the picture. The OS code needs to run somewhere. So (FreeRTOS) other OS will run in the Thread Mode
(PM) while the interrupts of the OS will run in the Handler/Priviledged Mode. Appicaiton(written by you) should run in the Thread Mode(UPM). 

******************************************************************************************************************************************************************
******************************************************************************************************************************************************************

Boot Up Process
Exception/Interrupt Handling -> Interrupt comes at the NVIC and then it goes to the CPU (M-Class). 
Lines on the NVIC is responsible for interrupts(usually considered as external). 
Whenever the CPU gets an Interrupt from the NVIC then it goes there and work on it and return back. 

It actually saves the things which it was doing early. 
The state information is saved in the registers of the CPU. 
This is saved further in the memory. 

Then it will take the interrupt and moved registers with new and completely handles the interrupt and finishes it.
Takes PC to interrupt address funciton. 
Once done then now upload the registers value to cpu again. 

In M class it saves some registers on the memory(stack memory or stack pointer). It saves around 8 registers.
Vector table consist of the addresses and for each interrupt we are having address which means if x interrupt 
happes then it goes to 0xndhfks address loaction. So when x interrupt occurs then CPU comes and 
then it CPU took the registes value and saved it on stack and then it loads PC to the 0xndhfks address for 
handling the interrupt once it gets return statement then CPU again goes to the Stack to reload the original
registers value and continue with execution. 

Reset is one of the execution. Reset is usuall first execution. 
Whenever the CPU resets SP is loaded with 0x0 and PC with the 0x4. 

SP is usually MSP to be in the priviledged mode. 

Two ways to handle the exception/interrupt 1)Trap 2) Vectored.
Vectored has different addresses for each interrupt.(M-Class has it)
In Trap it has single addres and then it goes there and work on it. 

******************************************************************************************************************************************************************
******************************************************************************************************************************************************************
Booting Process :- 
0X0 -> SP ->MSP
0X4 -> PC
This is what it needs to be proved.
Make File is used to automate the process of the type command on the cli. 
linker script guides on how to place stuffs on the memory.
3 files -> assembly, makefile, linker script. 
assembly will be converted to the object and then we will map the object file with the linker and 
then it will generate the .elf file. This elf will be having the instructions. 
This elf will be loaded into qemu (stimulate like cortex m3).
Qemu will decode those instructions and work like the cortex m3. And then we will connect the gdb to this and 
do debugging. Gdb will show the PC and SP value. 

******************************************************************************************************************************************************************
******************************************************************************************************************************************************************
Instruction Encoderin and Binary Dump
Ref ARM Architecture Reference Manual Thumb-2 Supplement
Two Instruction -> 16 bit Thumb and 32 bit ARM
Thumb -> Less Memory, Need Good Encodeing Capability, Less Number of Instruction/Operation.
ARM -> Thumb2 Instruction which allows both 16 bit and 32 bit encoding. 




